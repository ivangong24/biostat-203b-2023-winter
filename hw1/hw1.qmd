---
title: "Biostat 203B Homework 1"
subtitle: "`r Sys.Date()`"
author: Yufan Gong 305301666
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: TRUE
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

## Q1. Git/GitHub

**Solution is done**

## Q2. Data ethics training

**Solution** Here is the completion report & certificate link: 

  <https://www.citiprogram.org/verify/?keaf58f19-b1d0-415e-870b-2f584a82fde3-53620134>

  <https://www.citiprogram.org/verify/?w6ef6e0df-e163-4ddc-bab8-2b74ab11b219-53620134>


## Q3. Linux Shell Commands

**Solution**

1. List the details of data files in `~/mimic` folder
```{bash}
ls -l ~/mimic
```


2. Display the contents in the folders `core`, `hosp`, `icu`. Why are these data files distributed as .csv.gz files instead of .csv (comma separated values) files?
```{bash}
for i in core hosp icu
do
  echo $i:
  ls ~/mimic/$i
done
```
The reason why these data files were distributed as .gz files is that the data contain comprehensive information for each patient while they were in the hospital. It could reduce the size of data by compressing these files and keep the original file name/content intact.


3. Briefly describe what bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

  -- `zcat` can print the content of a compressed/plain file without uncompressing the file.
  
  -- `zless` can paginate the content of a compressed/plain file without uncompressing the file.
  
  -- `zmore` can print the contents of a compressed/plain file one screen at a time.
  
  -- `zgrep`can search specific contents of a compressed/plain file.
  
4. What’s the output of the following bash script?
```{bash}
for datafile in ~/mimic/core/*.gz
do
  ls -l $datafile
done
```
    
Display the number of lines in each data file using a similar loop

```{bash}
for datafile in ~/mimic/core/*.gz
do
  echo $datafile:
  zcat < $datafile | wc -l
done
```

5. a) Display the first few lines of `admissions.csv.gz`
```{bash}
zmore < ~/mimic/core/admissions.csv.gz | head -5
```
b) How many rows are in this data file?

```{bash}
zcat < ~/mimic/core/admissions.csv.gz | wc -l
```

c) How many unique patients (identified by subject_id) are in this data file?
```{bash}
zcat < ~/mimic/core/admissions.csv.gz |  awk -F "," '{print $1}' | sort | uniq | wc -l
```

6. a) What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`?


First, we need to locate the positions of these variables: 

```{bash}
zmore < ~/mimic/core/admissions.csv.gz | head -1
```

Thus, the corresponding positions for these variables are 6, 7, 9 and 12, respectively.

Then, we can select the columns accordingly and print the unique values for each of them.
```{bash}
for i in 6 7 9 12
do
 zcat < ~/mimic/core/admissions.csv.gz |  awk -F ","  -v i="$i" '{print $i}' | sort | uniq -c
done
```

b) report the count for each unique value of these variables
```{bash}
for i in 6 7 9 12
do
 zcat < ~/mimic/core/admissions.csv.gz |  awk -F ","  -v i="$i" '{print $i}' | sort | uniq | wc -l
done
```
Since the numbers presented include the variable name, we need to substract 1 from each of them. Thus, the count for each unique value of these variables are 9, 12, 3 and 8, respectively.


## Q4. Who's popular in Price and Prejudice

1. Obtain the full text of the novel from http://www.gutenberg.org/cache/epub/42671/pg42671.txt and save to your local folder.
```{bash}
# wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
`wget -nc` can link to the website and download the file to the current working directory. With the `-nc` option, `wget` will not download the file again by overwriting the current file.

Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.


```{bash}
# wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o "$char" ~/203b-hw/hw1/pg42671.txt | wc -l
done
```

2. What’s the difference between the following two commands?

```{bash}
echo 'hello, world' > test1.txt
```

and

```{bash}
echo 'hello, world' >> test2.txt
```

Both of them will write `"hello, world"` into a text file. For the first one, it directs the output from `echo 'hello, world'` to the text file. However, for the second one, it appends the output from the command to the text file. For example, if I further type `echo 'hello' >> test2.txt`, it will generate another line showing `hello` in test2.text. If I type `echo 'hello' > test1.txt` later, it will overwrite test1.txt and only show `hello` in the first line.


3. Using your favorite text editor (e.g., vi), type the following and save the file as `middle.sh`:

```{bash}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
# head -n "$2" "$1" | tail -n "$3"
```

```{bash}
chmod +x middle.sh
```

```{bash}
ls -al ~/203b-hw/hw1
```


Using chmod to make the file executable by the owner, and run

```{bash}
./middle.sh pg42671.txt 20 5
```

Explain the output. Explain the meaning of `"$1"`, `"$2"` and `"$3"` in this shell script. Why do we need the first line of the shell script?

The output showed the author and editor information of this book, which is the information from line 16 to line 20 (a total of 5 lines were displayed here).

`"$1"`, `"$2"` and `"$3"` in this shell script are the shifting arguements that pass value from one to another. For example, the value in `"$1"` will be put into `"$2"`, etc. 

The reason why we need the first line is that it will identify the script as a bash script and will interpret the file using bash. 

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2021`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

```{bash}
cal
```
 
`cal` shows the calendar of current month.

```{bash}
cal 2021
```

`cal 2021` shows the entire calendar of 2021.

```{bash}
cal 9 1752
```

`cal 9 1752` shows the calendar of September in 1752. The unusual thing was that it missed days from September 3rd to September 13th. This is because the British Empire changed the calendar from Julian calendar to Gregorian calendar in 1752 in order to change the mean length of a calendar year from 365.25 days to 365.2425 days.

```{bash}
date
```
`date` shows the current day, date, time, time zone and year.

```{bash}
hostname
```
`hostname` shows the hostname of the machine which the user is working on.

```{bash}
arch
```
`arch` shows the computer structure.

```{bash}
uname -a
```
`uname -a` reports all of the information related to the system, (i.e., hostname, kernel release and version, machine hardware name, machine platform, etc.)

```{bash}
uptime
```
`uptime` prints the current runtime and system load of the machine.

```{bash}
who am i
```
`who am i` prints the current login username of this computer and the current date and time.

```{bash}
who
```
`who` prints the username currently logged into Linux operating system and the time of login.

```{bash}
w
```
`w` displays the information of each current login users, current runtime and system load of the machine.

```{bash}
id
```
`id` shows the identity information for the current user.

```{bash}
last | head
```
`last | head` displays the first 10 rows of the last login sessions of the system users.

```{bash}
echo {con,pre}{sent,fer}{s,ed}
```
`echo {con,pre}{sent,fer}{s,ed}` shows different combinations of the given sets of paired strings.

```{bash}
time sleep 5
```
`time sleep 5` prints the runtime of this command by pausing the script for 5 seconds.

```{bash}
history | tail
```

`history | tail` shows the last 10 rows of the commands that the user input into the terminal.