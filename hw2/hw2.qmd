---
title: "Biostat 203B Homework 2"
date: "`r format(Sys.time(), '%d %B, %Y')`"
author: "Yufan Gong (UID: 305301666)"
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup, message = FALSE}
library(data.table)
library(lubridate)
library(R.utils)
library(ggthemes)
library(tidyverse)
```


MIMIC data location
```{r}
mimic_path <- "~/mimic"
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2023winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.


Display the contents of MIMIC data folder. 
```{r}
c("/", "/core", "/hosp", "/icu") %>% 
  set_names() %>% 
  map(~str_c("ls -l ", mimic_path, .x) %>% 
        system(intern = TRUE)
      )

```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three programs: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the popular data.table package. 

Which function is fastest? Is there difference in the (default) parsed data types? (Hint: R function `system.time` measures run times.)

For later questions, we stick to the `read_csv` in tidyverse.

```{r, message = FALSE}

list(read.csv, read_csv, fread) %>% 
  map(
    ~system.time(
      str_c(mimic_path, "/core", "/admissions.csv.gz") %>% 
        . %>% 
        map(class) %>% 
        as_tibble() %>% 
        t() %>%
        print()
      )
    ) %>% 
  set_names("read.csv", "read_csv", "fread")
```
It seems like `fread` is the fastest way to read a compressed csv file.
The default data types are different between the three methods. In `read.csv` and `fread`, all numeric variables were classified as integer, while they remained numeric in `read_csv`. All date variables were classified as character in `read.csv`, while they remained as date format in `read_csv` and `fread`.

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/icu/icustays.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Import `icustatys.csv.gz` as a tibble `icustays_tble`. 

```{r, message = FALSE}
icustays_tble <- str_c(mimic_path, "/icu/icustays.csv.gz") %>% 
  read_csv() %>% 
  print(width = Inf)

```


2. How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? 
```{r}
icustays_tble %>% 
  select(subject_id) %>% 
  distinct() %>% 
  nrow()
```
There are 53150	unique `subject_id`. Yes, one `subject_id` can have multiple ICU stays.

3. Summarize the number of ICU stays per `subject_id` by graphs. 

```{r}
icustays_tble %>% 
  group_by(subject_id) %>% 
  summarise(
    count = n(), 
    .groups = "keep"
    ) %>% 
  ggplot(aes(x = count)) +
  geom_bar() +
  labs(
    x = "Number of ICU stays",
    y = "Number of subjects"
  ) +
  theme_classic()
```


4. For each `subject_id`, let's only keep the first ICU stay in the tibble `icustays_tble`. (Hint: `slice_min` and `slice_max` may take long. Think alternative ways to achieve the same function.)

```{r}
icustays_tble <- icustays_tble %>% 
  group_by(subject_id) %>% 
  arrange(intime, .by_group = TRUE) %>% 
  slice_head(n = 1) %>% 
  ungroup() %>% 
  print(width = Inf)

```


## Q3. `admission` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/core/admissions/> for details of each field in this file. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/core/admissions.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Import `admissions.csv.gz` as a tibble `admissions_tble`.

```{r, message = FALSE}
admissions_tble <- str_c(mimic_path, "/core/admissions.csv.gz") %>% 
  read_csv() %>% 
  print(width = Inf)

```


2. Let's only keep the admissions that have a match in `icustays_tble` according to `subject_id` and `hadm_id`.

```{r}
admissions_tble <- admissions_tble %>% 
  semi_join(
    icustays_tble, 
    by = c("subject_id", "hadm_id")
    ) %>% 
  select(-hadm_id) %>% 
  print(width = Inf)

```


3. Summarize the following variables by graphics. 

    - admission year  
    - admission month  
    - admission month day  
    - admission week day  
    - admission hour (anything unusual?)  
    - admission minute (anything unusual?)  
    - length of hospital stay (anything unusual?)   
    
```{r}
list(
  list(year, month, mday, wday, hour, minute),
  list("Year", "Month", "Month day", "Week day", "Hour", "Minute")
  ) %>% 
  pmap(~admissions_tble %>% 
         ggplot(aes(x = admittime %>% 
                      .x)) +
         geom_bar() +
         labs(
           x = .y,
           y = "Number of subjects") +
         theme_classic())

```
It seems like patients are more likely to be admitted after 3 p.m. and reach peak at 12 a.m. There is also a regional peak around 7 a.m.

It seems like there is a recurring peak of patient admission every 14 minutes.

```{r, warning = FALSE}
admissions_tble <- admissions_tble %>% 
  mutate(
    lengthstay = interval(
      ymd_hms(admittime), 
      ymd_hms(dischtime)
      ) %>% 
      as.duration()/3600/24
    ) 

admissions_tble %>% 
  ggplot(aes(x = lengthstay)) +
  geom_histogram(bins = 500) + 
  labs(
    x = "Length of hospital stay (days)",
    y = "Number of subjects"
  ) +
  theme_classic()

```

Most patients will be discharged within 20 days, however, there are a few of them stayed over 100 days.
    
## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/core/patients/> for details of each field in this file. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/core/patients.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/core/patients/>) as a tibble `patients_tble` and only keep the patients who have a match in `icustays_tble` (according to `subject_id`).

```{r, message = FALSE}
patients_tble <- str_c(mimic_path, "/core/patients.csv.gz") %>% 
  read_csv() %>% 
  semi_join(
    icustays_tble, 
    by = "subject_id"
    ) %>% 
  mutate(
    gender = case_when(gender == "F" ~ "Female", 
                       gender == "M" ~ "Male", 
                       TRUE ~ gender
                       )
    ) %>% 
  print(width = Inf)

```


2. Summarize variables `gender` and `anchor_age`, and explain any patterns you see.

```{r}
patients_tble %>% 
  group_by(gender) %>% 
  ggplot(aes(x = anchor_age)) + 
  geom_bar() + 
  labs(
    x = "Age",
    y = "Number of subjects"
  ) +
  facet_wrap(~gender) + 
  theme_classic()
```
  - There are more males than females. 
  - The age of most patients is between 50-80 in both males and females. 
  - There are more patients in their 90s than any other age groups.


## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/hosp/labevents.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

`d_labitems.csv.gz` is the dictionary of lab measurements. 
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/hosp/d_labitems.csv.gz"), 
    " | head"
    ), 
  intern = TRUE
)
```

1. Find how many rows are in `labevents.csv.gz`.

```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/hosp/labevents.csv.gz"), 
    " | wc -l"
    ), 
  intern = TRUE
)
```


2. We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` only containing these items for the patients in `icustays_tble` as a tibble `labevents_tble`. 

    Hint: `labevents.csv.gz` is a data file too big to be read in by the `read_csv` function in its default setting. Utilize the `col_select` option in the `read_csv` function to reduce the memory burden. It took my computer 5-10 minutes to ingest this file. If your computer really has trouble importing `labevents.csv.gz`, you can import from the reduced data file `labevents_filtered_itemid.csv.gz`.

```{r, message = FALSE}
dlabitems_tble <- str_c(
    mimic_path, 
    "/hosp/d_labitems.csv.gz"
    ) %>% 
  read_csv() %>% 
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221, 51301, 50931)
         ) %>% 
  print(width = Inf)
```

    
```{r, message = FALSE}
labevents_tble <- 
  str_c(
    mimic_path, 
    "/hosp/labevents_filtered_itemid.csv.gz"
    ) %>% 
  read_csv() %>% 
  filter(itemid %in% dlabitems_tble$itemid) %>% 
  semi_join(
    icustays_tble, 
    by = "subject_id"
    ) %>% 
  print(width = Inf)
  
```


I tried to load the data into my laptop, however, my R session aborted since it exceeded the memory limit (8G). Therefore, I loaded `labevents_filtered_itemid.csv.gz` here to save some memory space.

3. Further restrict `labevents_tble` to the first lab measurement during the ICU stay. 


```{r}
labevents_tble <- labevents_tble %>% 
  left_join(icustays_tble %>% 
              select(subject_id, intime, outtime), 
            by = "subject_id") %>% 
  filter(charttime >= intime & charttime <= outtime) %>% 
  group_by(subject_id, itemid) %>% 
  arrange(charttime, .by_group = TRUE) %>% 
  slice_head(n = 1) %>% 
  select(-c(intime, outtime, charttime)) %>% 
  ungroup() %>% 
  pivot_wider(
    id_cols = subject_id, 
    names_from = itemid,
    values_from = valuenum
  ) %>% 
  rename_at(
    vars(dlabitems_tble %>% 
           pull(itemid) %>% 
           as.character()
         ), 
    ~dlabitems_tble %>% 
      pull(label) %>% 
      str_to_lower() %>% 
      str_replace_all(" ","_")
    ) %>% 
  print(width = Inf)
```

4. Summarize the lab measurements by appropriate numerics and graphics. 

```{r}
labevents_tble %>% 
  select(-subject_id) %>% 
  map(summary) %>% 
  bind_rows(.id = "id")

```


```{r}
labevents_tble %>% 
  pivot_longer(
    cols = !subject_id,
    names_to = "lab_measure",
    values_to = "value"
  ) %>% 
  group_by(lab_measure) %>% 
  ggplot(aes(x = lab_measure, y = value, color = lab_measure)) +
  geom_boxplot(outlier.shape = NA, na.rm = T, show.legend = FALSE) +
  scale_y_continuous(limits = c(0, 300)) + 
  scale_color_colorblind() + 
  labs(
    x = "Lab measurements",
    y = "Value",
    color = "Lab measurements "
  ) +
  coord_flip() +
  theme_classic()
```
I hid the outliers for each lab measurement and limit the `value` axis (300) so that the boxplots would not gather together. 


## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/icu/chartevents.csv.gz"), 
    " | head"), 
  intern = TRUE
)
```
`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{r}
system(
  str_c(
    "zcat < ", 
    str_c(mimic_path, "/icu/d_items.csv.gz"), 
    " | head"), 
  intern = TRUE
)
```

1. We are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble` as a tibble `chartevents_tble`.

    Hint: `chartevents.csv.gz` is a data file too big to be read in by the `read_csv` function in its default setting. Utilize the `col_select` option in the `read_csv` function to reduce the memory burden. It took my computer >15 minutes to ingest this file. If your computer really has trouble importing `labevents.csv.gz`, you can import from the reduced data file `chartevents_filtered_itemid.csv.gz`.
    
    
```{r, message = FALSE}
dchartitems_tble <- str_c(mimic_path, "/icu/d_items.csv.gz") %>% 
  read_csv() %>% 
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>% 
  print(width = Inf)
```
 
    
```{r, message = FALSE}
chartevents_tble <- 
  str_c(
    mimic_path, 
    "/icu/chartevents_filtered_itemid.csv.gz") %>% 
  read_csv() %>% 
  filter(itemid %in% dchartitems_tble$itemid) %>% 
  semi_join(
    icustays_tble, 
    by = c("subject_id", "hadm_id", "stay_id")
    ) %>% 
  select(-c(hadm_id, stay_id)) %>% 
  print(width = Inf)

```


2. Further restrict `chartevents_tble` to the first vital measurement during the ICU stay. 

```{r}
chartevents_tble <- chartevents_tble %>% 
  left_join(icustays_tble %>% 
              select(subject_id, intime, outtime), 
            by = "subject_id") %>% 
  filter(charttime >= intime & charttime <= outtime) %>% 
  group_by(subject_id, itemid) %>% 
  arrange(charttime, .by_group = TRUE) %>% 
  slice_head(n = 1) %>% 
  select(-c(intime, outtime, charttime)) %>% 
  ungroup() %>% 
  pivot_wider(
    id_cols = subject_id, 
    names_from = itemid,
    values_from = valuenum
  ) %>% 
  rename_at(
    vars(dchartitems_tble %>% 
           pull(itemid) %>% 
           as.character()
         ), 
    ~dchartitems_tble %>% 
      pull(label) %>% 
      str_to_lower() %>% 
      str_replace_all(" ","_")
    ) %>% 
  print(width = Inf)

```

3. Summarize these vital measurements by appropriate numerics and graphics. 

```{r}
chartevents_tble %>% 
  select(-subject_id) %>% 
  map(summary) %>% 
  bind_rows(.id = "id")
```

```{r}
chartevents_tble %>% 
  pivot_longer(
    cols = !subject_id,
    names_to = "vital_measure",
    values_to = "value"
    ) %>% 
  group_by(vital_measure) %>% 
  ggplot(aes(x = vital_measure, y = value, color = vital_measure)) +
  geom_boxplot(outlier.shape = NA, na.rm = T, show.legend = FALSE) + 
  scale_color_colorblind() + 
  scale_y_continuous(limits = c(0, 200)) + 
  labs(
    x = "Vital measurements",
    y = "Value"
  ) +
  coord_flip() +
  theme_classic()

```
Similar as Q6.4, the outliers were hidden and the limit of `value` axis was set to an arbitrary number (200) in order to make the plot more readable.

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are the first ICU stay of each unique adult (age at admission > 18) and columns contain at least following variables  

- all variables in `icustays.csv.gz`  
- all variables in `admission.csv.gz`  
- all variables in `patients.csv.gz`  
- first lab measurements during ICU stay  
- first vital measurements during ICU stay
- an indicator variable `thirty_day_mort` whether the patient died within 30 days of hospital admission (30 day mortality)

```{r, message=FALSE}

mimic_icu_cohort <- list(icustays_tble, admissions_tble, 
                         patients_tble, labevents_tble, 
                         chartevents_tble) %>% 
  reduce(left_join, by = "subject_id") %>% #apply left_join multiple times to the given list
  filter(anchor_age > 18) %>% #limit to age > 18
  mutate(thirty_day_mort = if_else(!is.na(deathtime) & lengthstay <= 30, "Died within 30 days", "Didn't die within 30 days")) %>% #create indicator variable
  mutate_if(is.character, str_to_title) %>% #change all strings to title style
  mutate_at(vars(thirty_day_mort), fct_rev) %>% #revert factor level
  print(width = Inf)

table(mimic_icu_cohort$thirty_day_mort)
```


## Q8. Exploratory data analysis (EDA)

Summarize following information using appropriate numerics or graphs.

- `thirty_day_mort` vs demographic variables (ethnicity, language, insurance, marital_status, gender, age at hospital admission)

- `thirty_day_mort` vs first lab measurements

- `thirty_day_mort` vs first vital measurements

- `thirty_day_mort` vs first ICU unit


```{r}
# `thirty_day_mort` vs demographic variables

# iteration of ggplots (categorical variables)
list("ethnicity", "language", "insurance", 
     "marital_status", "gender") %>% 
  map(
    ~mimic_icu_cohort %>% 
      ggplot(
        aes(
          x = .data[[.x]], 
          fill = thirty_day_mort
          )
        ) + 
      geom_bar(position = "dodge") + 
      scale_fill_colorblind() + 
      labs(
        x = .x,  
        y = "Number of subjects", 
        fill = "30 day mortality"
        ) + 
      coord_flip() + 
      theme_classic()
      )

# ggplot of numeric variable (age at admission)
mimic_icu_cohort %>% 
  ggplot(
    aes(
      x = thirty_day_mort, 
      y = anchor_age, 
      color = thirty_day_mort
      )
    ) + 
  geom_boxplot(na.rm = T, show.legend = FALSE) + 
  scale_color_colorblind() +
  labs(
    x = "30 day mortality",
    y = "Age at admission"
    ) +
  theme_classic()

```

```{r}
# `thirty_day_mort` vs first lab measurements

#create a function to remove outliers
dec_out_na <- function(x, thres = 3, na.rm = TRUE) {
  sd <- sd(x, na.rm = na.rm)
  mean <- mean(x, na.rm = na.rm)
  id_out = x > mean + thres * sd | x < mean - thres * sd
  x[id_out] = NA
  return(x)
}

dlabitems_tble %>% 
  pull(label) %>% 
  str_to_lower() %>% 
  str_replace_all(" ", "_") %>% 
  map(
    ~mimic_icu_cohort %>% 
      mutate_if(is.numeric, dec_out_na) %>% 
      ggplot(
        aes(
          x = thirty_day_mort, 
          y = .data[[.x]], 
          color = thirty_day_mort
          )
        ) + 
        geom_boxplot(na.rm = T, show.legend = FALSE) + 
        scale_color_colorblind() + 
        labs(
          x = "30 day mortality", 
          y = .x
          ) + 
        theme_classic()
    )

```
I created a function to remove all extreme values in lab measurements so that the boxplots were more readable.


```{r}
# `thirty_day_mort` vs first vital measurements
dchartitems_tble %>% 
  pull(label) %>% 
  str_to_lower() %>% 
  str_replace_all(" ", "_") %>% 
  map(
    ~mimic_icu_cohort %>% 
      mutate_if(is.numeric, dec_out_na) %>% 
      filter(.data[[.x]] < 300) %>%
      ggplot(
        aes(
          x = thirty_day_mort, 
          y = .data[[.x]], 
          color = thirty_day_mort
          )
        ) + 
      geom_boxplot(na.rm = T, show.legend = FALSE) + 
      scale_color_colorblind() + 
      labs(
        x = "30 day mortality", 
        y = .x
        ) + 
      theme_classic()
    )

```

To visualize the vital measurements, I also applied the same function to remove outliers. However, some extreme data points were not removed since the maximum value of some variables are too large so that these values did not meet the criteria of "outliers" (i.e., within 3 standard deviations around the mean). Therefore, I further set an arbitrary cutoff (300) to keep values that make biological sense.

```{r}
# `thirty_day_mort` vs first ICU unit
mimic_icu_cohort %>% 
  ggplot(aes(x = first_careunit, fill = thirty_day_mort)) + 
  geom_bar(position = "dodge") + 
  scale_fill_colorblind() + 
  labs(
    x = "First ICU unit", 
    y = "Number of subjects", 
    fill = "30 day mortality"
    ) + 
  coord_flip() + 
  theme_classic()
```

